%\VignetteIndexEntry{Guide to the remoter Package}
\documentclass[]{article}

\input{./include/settings}


\mytitle{Guide to the remoter Package}
\mysubtitle{}
\myversion{0.4-0}
\myauthor{
\centering
Drew Schmidt \\ 
\texttt{wrathematics@gmail.com} 
}



\begin{document}

\begin{figure}[ht]
\vspace{-.5in}
  \begin{minipage}[c]{8.5in}
  \hspace{-1.0in}
  \includegraphics[width=8in,height=10in]{./cover/remoter.pdf}
  \end{minipage}
\end{figure}

\makefirstfew




\section{Introduction}\label{introduction}

% \begin{wrapfigure}{r}{0.4\textwidth}
%   \centering
%     \includegraphics[width=0.38\textwidth]{pics/remoter}
% \end{wrapfigure}

The \textbf{remoter} package \cite{remoter} allows you to control
a remote R session from a local one. The local R session can be in a
terminal, GUI, or IDE such as RStudio. The remote R session should be
run in the background as, well, a server.

The package uses \textbf{ZeroMQ} \cite{zeromq} by way of the R
package \textbf{pbdZMQ} \cite{Chen2015pbdZMQpackage} to handle
communication. Our use of pbdZMQ is specialized to client/server
communications, but the package is very general. For more details about
\textbf{pbdZMQ} see the \textbf{pbdZMQ} package vignette
\cite{Chen2015pbdZMQvignette}.

The work for remoter was born out of the \textbf{pbdCS} package
\cite{pbdCS}, which is part of the Programming with Big Data in R
(pbdR) project\cite{pbdR2012}. pbdR is a series of R packages
that enable the usage of the R language on large distributed machines,
like clusters and supercomputers. See
\href{http://r-pbd.org}{r-pbd.org/}) for details.

\subsection{Installation}\label{installation}

You can install the stable version from CRAN using the usual
\texttt{install.packages()}:

\begin{lstlisting}[language=rr]
install.packages("remoter")
\end{lstlisting}

In order to be able to create and connect to secure servers, you need to also
install the \textbf{sodium} package.  The use of \textbf{sodium} is optional
because it is a non-trivial systems dependency, but it is highly recommended. 
You can install it manually with a call to \texttt{install.packages("sodium")}
or by installing \textbf{remoter} via:

\begin{lstlisting}[language=rr]
install.packages("remoter", dependencies=TRUE)
\end{lstlisting}

For more information about the security features of \textbf{remoter}, see
Section \ref{problems} below.

The development version is maintained on GitHub, and can easily be installed by
any of the packages that offer installations from GitHub:

\begin{lstlisting}[language=rr]
### Pick your preference
devtools::install_github("RBigData/remoter")
ghit::install_github("RBigData/remoter")
remotes::install_github("RBigData/remoter")
\end{lstlisting}

To simplify installations on cloud systems, we also have a
\href{https://github.com/RBigData/pbdr-remoter}{Docker container} available.



\subsection{Package Functions}\label{package-functions}

The package contains numerous functions. Some should be called from
regular R, and others only from inside a running client.

The functions to call only from regular R (outside the client):


\begin{longtable}[]{@{}ll@{}}
\toprule
Function & Description\tabularnewline
\midrule
\endhead
\texttt{server()} & Create a server\tabularnewline
\texttt{client()} & Interactively connect to a server\tabularnewline
\texttt{batch()} & Send batch commands to\tabularnewline
\texttt{relay()} & Launch an intermediary to relay commands between
client/server\tabularnewline
\bottomrule
\end{longtable}

Several of the functions to call only from inside the running client
are:

\begin{longtable}[]{@{}ll@{}}
\toprule
Function & Description\tabularnewline
\midrule
\endhead
\texttt{c2s()} & Transport an object from the client to the
server.\tabularnewline
\texttt{s2c()} & Transport an object from the server to the
client.\tabularnewline
\texttt{exit()} & Disconnect the client from the server.\tabularnewline
\texttt{shutdown()} & Disconnect from and shut down the
server.\tabularnewline
\texttt{showlog()} & View the server log.\tabularnewline
\texttt{evalc()}, \texttt{lsc()}, \texttt{rmc()} & Client versions of
\texttt{eval()}, \texttt{ls()}, and \texttt{rm()}\tabularnewline
\bottomrule
\end{longtable}

We will discuss many of these functions throughout the remainder of this
vignette.



\section{Clients and Servers: Just the Basics}
\label{clients-and-servers-just-the-basics}

If you simply want to understand how \textbf{remoter} works, we do not
need to involve remote computers right out the gate. Instead, we will
create a local server and connect to it from another local R session.

So the first thing to do is to start up 2 separate R sessions. One will
be the \emph{server}, receiving commands, and the other will be the
\emph{client}, sending them.

\subsection{The Server}\label{the-server}

In the R process designated to be the server, we will use the
\texttt{server()} command to, well, start the server. Running this with
no additional arguments will create a server. Optionally, one can
specify a password via the \texttt{password} argument. Another useful
feature is setting \texttt{showmsg=TRUE}, which will show in the server
R process what messages are coming in. For now, let's run it with
\texttt{showmsg=TRUE}:

\begin{lstlisting}[language=rr]
remoter::server(showmsg=TRUE)
\end{lstlisting}

That's it! That R session is now listening for commands. We can shut the
server down in a few ways. Probably the best (particularly when dealing
with remote machines) is from the client itself. More on this later. The
other way is to kill the hosting R process. Finally, you can terminate
the server with \texttt{ctrl+c}, but the other methods are preferred.

\subsection{The Client}\label{the-client}

Once the server is set up, we can connect to it with the
\texttt{client()} command. Since we are connecting to a local server,
the address we want to connect to is \texttt{"localhost"} (the default)
or \texttt{"127.0.0.1"}. We will have to make sure that the
\texttt{port} argument matches the listening port of our server, or
we'll never connect. Finally, we can set the way the R prompt looks
while the client is running by the \texttt{prompt} argument. You can set
it to whatever you like, but disambiguating between your regular, local
R session and the \textbf{remoter} client is very useful. Things can get
confusing in a hurry if you aren't careful.

So to connect, in our R session designated to be the client (the only
one left), we would enter:

\begin{lstlisting}[language=rr]
remoter::client()
\end{lstlisting}

And you should be good to go. You can now enter R commands in the client
and have them executed on the server. The following section will go into
more detail about specifics on using the client/server setup.



\section{Using remoter Interactively}\label{using-remoter}

Before proceeding, make sure you understand how to set up a client and a
server. See the previous section for details.

\subsection{Philosophy}\label{philosophy}

By default, all code entered to the client is executed on the remote
server. There are several utility functions to help execute code on the
local R session (see section below). But you should assume that anything
entered into the client session, \emph{unless you explicitly specify to
the contrary}, is executed only on the server.

\subsection{Utility Functions}\label{utility-functions}

There are a few utility functions available that have to do with
handling execution of things locally or moving data between client and
server.

By default, all commands entered inside of the client are executed on
the server. If you need to do some things in the local R session, you
can kill the client and just reconnect when you're ready. Alternatively,
you can use the \texttt{lsc()}, \texttt{rmc()}, and \texttt{evalc()}
functions. These are client versions of \texttt{ls()}, \texttt{rm()},
and \texttt{eval()}.

For moving data between client and server, there are the \texttt{s2c()}
and \texttt{c2s()} commands which transfer from server to client and
from client to server, respectively. These functions transfer data that
resides in the memory of the client/server. To transfer a file in chunks
(without reading all of it into memory), see
\texttt{?pbdZMQ::zmq.sendfile} or \texttt{?pbdZMQ::zmq.recvfile}.

\subsection{Shutting Things Down}\label{shutting-things-down}

To terminate the client, enter the command \texttt{exit()}. By default,
this will terminate the local client only, and leave the server running.
If you wish to also shut down the server with the client, you can run
\texttt{exit(client.only=FALSE)}. For hopefully obvious reasons, you can
not terminate the server and leave the client running.

From the client side, running \texttt{exit()} will not shut down the
interactive R session that was hosting the client. You can also
disconnect the client from the server without shutting down the server
by killing the client R session or executing \texttt{Ctrl-c} in the
client.



\section{Using remoter in Batch}

Not every workflow works best interactively.  This is why we also offer the
\texttt{batch()} function.  This allows you to pipe a script (either in a
separate file, or typed out in the R session --- examples below) to a
\textbf{remoter} server without having to interactively control things.

Perhaps the simplest example is using the \texttt{script=} argument of
\texttt{batch()}.

\begin{lstlisting}[language=rr]
remoter::batch(script="1+1")
\end{lstlisting}

Then, assuming a \textbf{remoter} session is running on the local
machine\footnote{for using \texttt{batch()} with remote servers, the same
caveats and rules apply as for \texttt{client()} --- see the \textit{Using
remoter with Remote Machines}~\cite{remotemachineguide} guide for details}
the scintillating result of "2" will be returned.

You can also easily pipe off longer scripts stored in separate files.  Say you
have a script "myscript.r" like so:

\begin{lstlisting}[language=rr, title=myscript.r]
x <- 1
y <- 2
x + y
\end{lstlisting}

Then you can send it for evaluation to the \textbf{remoter} server by running:

\begin{lstlisting}[language=rr]
remoter::batch(file="myscript.r")
\end{lstlisting}

We conclude with a note of caution.  If you have a "master script" that calls
\texttt{source()} (or similar) on other scripts in different files, this will
not work without modification.  You should change your \texttt{source()} calls
to the appropriate \texttt{batch()} call.  In fact, you may think of
\texttt{batch()} as \texttt{source()} for remote servers.



\section{Security}\label{security}

Security in \textbf{remoter} comes in two forms currently:

\begin{enumerate}
\item password credentialing
\item public key encryption
\end{enumerate}

The password is declared when the server is spawned as a launch option
in \texttt{remoter::server()}. Without the use of encryption, it will be
transmitted from client to server unsecurely.

Encryption is optional, and disabled by default. This is because
encryption is handled by the \textbf{sodium} package
\cite{sodium}, which uses the \textbf{libsodium}
\cite{libsodium} library, which can be difficult to build on some
platforms.

If you have the \textbf{sodium} package installed \emph{on both the
client and the server}, start the server with the option
\texttt{secure=TRUE}, and your client will automatically connect
securely. If the server was launched (by necessity or optionally) with
\texttt{secure=FALSE}, then the client can not connect securely, even if
the client machine has the \textbf{sodium} package installed.

If ever in any doubt, use the \texttt{is.secure()} command from the
client to see if communications are encrypted.


% 
% \section{Comparisons to the futures Package}
% 
% TODO



\section{Problems, Bugs, and Other Maladies}
\label{problems}

The package should basically be useable, but there are some issues you
might want to be aware of.

\textbf{Problem}: I lost my internet connection and the client is no
longer sending messages.

\textbf{Solution}: Just \texttt{Ctrl+c} the client and re-run the
\texttt{remoter::client()} call and you should be good to go. The server
should still be running. You can therefore also have multiple clients
connect to the same server, and they will share the same data (though
they will not see each other's commands). I actually consider this a
feature, but I'm not married to it and I could probably be convinced to
change it.

\textbf{Problem}: The up/down arrow keys don't work right in the R
terminal when using the client.

\textbf{Explanation}: That's because the client is just some R code
sitting on top of the R REPL. This shouldn't be a problem if you're
using an IDE like RStudio or the like, where you pass commands from an
editor window to the R session. But as far as I am aware, this can not
be fixed.

\textbf{Problem}: There's no security!

\textbf{Explanation}: Communications are optionally encrypted, if the
\textbf{sodium} package is available.  The reason it is optional is that
\textbf{libsodium} is actually a fairly weighty systems dependency.  This is a
big problem for managed machines like clusters and supercomputers.  
You must have \textbf{sodium} installed on both
the client and server machine, and start the server with the option
\texttt{secure=TRUE} to use this, however.

There is also a password system.  Passwords are read in from the user/client
(and optionally at server creation) with the \textbf{getPass}
package~\cite{getPassPackage}.  This will read with masking (i.e., without
printing the password as it is typed).  See the \textbf{getPass} package
vignette~\cite{getPassVignette} for more details.

Passwords are always hashed, whether or not the \textbf{sodium} package is
available, as the hashing is done with the \textbf{argon2}
package~\cite{argon2}.  This is a reasonably new algorithm, and is believed to
be very secure.

All that said, I am not a security person, so it is entirely possible that I
have messed something up.  Just know that I'm trying my best, and that if you
believe something to be in error, I'd really like to know about it.

\textbf{Problem}: Something else is wrong!

\textbf{Explanation}: Please be so kind as to
\href{https://github.com/wrathematics/remoter/issues}{file an issue}
describing the problem. Be as descriptive as possible.



\addcontentsline{toc}{section}{References}
\bibliography{./include/remoter}
\bibliographystyle{plain}


\end{document}
