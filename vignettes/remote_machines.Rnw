%\VignetteIndexEntry{Using remoter with Remote Machines}
\documentclass[]{article}


\input{./include/settings}


\mytitle{Using remoter with Remote Machines}
\mysubtitle{}
\myversion{0.4-0}
\myauthor{
\centering
Drew Schmidt \\ 
\texttt{wrathematics@gmail.com} 
}



\begin{document}

\begin{figure}[ht]
\vspace{-.5in}
  \begin{minipage}[c]{8.5in}
  \hspace{-1.0in}
  \includegraphics[width=8in,height=10in]{./cover/remote_machines.pdf}
  \end{minipage}
\end{figure}

\makefirstfew



\section{Introduction}
\label{intro}

This guide is for those who understand the basics of using \textbf{remoter},
and wish to learn how to interact with a remotely hosted server.  For the
basics, please first see the \textit{Guide to the remoter
Package}~\cite{remoterguide} guide.

Before we begin, a quick word about addresses and ports.

An address should not include any protocols, like \texttt{tcp://} or
\texttt{http://}. The address should also not contain any ports (denoted
by a \texttt{:}), as this value goes in a separate argument.

A port is a non-negative integer. The minimum value for a valid port is
1024 (values 1-1023 are privileged), and the maximum value is 65535.
That said, you are strongly encouraged to use port values between 49152
and 65535. The documentation for \textbf{pbdZMQ}~\cite{Chen2015pbdZMQpackage}
discusses this in detail.  Specifically, see \texttt{?pbdZMQ::random\_port}.

Of course, all the usual issues apply. The server should be able to
accept communications on the desired port. One way to handle this is by
opening the desired port. Opening ports is very standard stuff, but
dependent on the system you are using, so consult relevant documentation
if you aren't sure what to do. Another way is by tunneling over ssh,
which we discuss in a later section.



\section{Creating a Remote Server}

Before beginning, you need to spawn your server.  This is something you only
need to do once, and you need to do it in such a way that it is allowed to run
persistently, even after you log off.

The easiest setup is if your server is available via ssh, and probably running
headless (without a monitor/GUI desktop environment).  This is what your typical
linux cloud instance looks like.  In this case,
we suggest you use a tool like tmux or screen.  This way, you can re-attach your
server session and easily read the logs live, which is very useful for
debugging.  However, this is not strictly necessary.

If you are using something like tmux or screen, then your workflow would look
something like:

\begin{enumerate}
  \item ssh to your remote (you only need to do this once!)
  \item Start a \textbf{tmux} or \textbf{screen} session
  \item Start R and run \texttt{remoter::server()} (see \texttt{?server} for
    additional options). Or even better, run
    \texttt{Rscript\ -e\ remoter::server()} so the server dies if
    something goes wrong.
  \item Detach your tmux/screen session and log out.
\end{enumerate}

Alternatively, if you wish to avoid tmux/screen, you still need to ssh to your
machine.  Then you can run the R session in the background by a fork via
something like:

\begin{lstlisting}[language=rr]
Rscript -e "remoter::server()" &
\end{lstlisting}

and disconnect.  If for some reason the server becomes unreachable via
\textbf{remoter}, you will have to manually connect again via ssh to kill the
rogue process with the \texttt{kill} command.

If you are running a full desktop environment, which is typical with Windows
servers, you should be able to launch an R process (say RGui) and start the
server there via \texttt{remoter::server()}.  Admittedly, we have no experience
with this configuration, so if you have experience here, we would love to hear
from you.



\section{Connecting to a Remote Server}

Because \textbf{remoter} is just and R package to connect to the remote, you
need only fire up your favorite R interface.  This can be the terminal, RStudio,
RGui (Windows), R.app (Mac), or even Emacs.  Whatever your choice, connect as
with a local server, but specifying the correct remote address (and possibly
port):

\begin{lstlisting}[language=rr]
remoter::client("my.remote.address")
\end{lstlisting}

So for example, say you have set up a server (as described above) on EC2
with address \texttt{"ec2-1-2-3-4.compute-1.amazonaws.com"}, listening
on port \texttt{56789}. Then you would run:

\begin{lstlisting}[language=rr]
remoter::client("ec2-1-2-3-4.compute-1.amazonaws.com", port=56789)
\end{lstlisting}

That's it! Everything else should work just as when you were running the
server locally.  The only hiccup is opening up that port.  If that is not
possible for you for whatever reason, then you may need to set up an ssh tunnel,
which we describe in the following section.



\section{Tunneling Over ssh}

If you can't or don't want to open up a port on a remote system, you can
always tunnel over ssh (assuming of course you actually have legitimate
access to the machine\ldots{}).

The \textbf{pbdRPC} package~\cite{Chen2017pbdRPCpackage} has offers some basic
tunneling functionality.  At the time of writing, it is somewhat new and
experimental.  But the reader is encouraged to check the package's
vignette~\cite{Chen2017pbdRPCvignette} for more details.

Even without \textbf{pbdRPC}, creating a tunnel is not terribly difficult.
Say you have user account \texttt{user} on remote with address
\texttt{my.remote.machine}. Suppose your remote machine is running a
\textbf{remoter} server, listening on port 55555. Then you can run:

\begin{lstlisting}[language=rr]
ssh user@my.remote.machine -L 55556:localhost:55555 -N
\end{lstlisting}

To be totally unambiguous:

\begin{itemize}
  \item server port (running on remote): 55555
  \item client port (running on your laptop): 55556
\end{itemize}

This will allow you to connect to the remote machine as follows:

\begin{lstlisting}[language=rr]
remoter::client("localhost", port=55556)
\end{lstlisting}

You can also spawn the server in the ssh tunnel call. For example, you
might run:

\begin{lstlisting}[language=rr]
ssh user@my.remote.machine -L 55556:localhost:55555 'Rscript -e "remoter::server(port=55555)"'
\end{lstlisting}

This will automatically launch a \textbf{remoter} server listening on
port 55555, tunneled over \texttt{localhost:55566}. If you are working
on a managed system, like a cluster or supercomputer, you might need to
run something like \texttt{module\ load\ R} first:

\begin{lstlisting}[language=rr]
ssh user@my.remote.machine -L 55556:localhost:55555 'module load R && Rscript -e "remoter::server(port=55555)"'
\end{lstlisting}



\section{Working with Relays}

When an intermediary between the client/server is necessary, it is generally
preferable to work with ssh tunnels whenever possible.  However, some use cases
may require or suggest a different strategy.  To that end, as of
\textbf{remoter} version 0.3-1, we now offer a different kind of spawnable
instalce: ``relays''.
These serve as ``middlemen'' between the client and server, and are
particularly useful for resources like clusters and supercomputers where
the login and compute nodes are separate. Internally, the relay is a
server that does nothing but pass messages between the client and
server. Figure~\ref{fig:relays} shows the basic conceptual idea about how
relays work.

\begin{figure}[ht]
  \centering
  \includegraphics{pics/remoter_relay}
  \caption{Remoter relays and their relationship to the client and server. The
    diagram is composed of icons from the OSA Icon Library}\label{fig:relays}
\end{figure}


To spawn a relay, you can do:

\begin{lstlisting}[language=rr]
remoter::relay(addr=my.server.addr, sendport=my.server.port)
\end{lstlisting}

As the name suggests in the above example, \texttt{my.server.addr} and
\texttt{sendport} represent the address and port of the server (what you
would use for \texttt{addr} in \texttt{remoter::client()} if you could
connect directly). Then the client will connect to the relay, not the
server (that's the whole point!) something like:

\begin{lstlisting}[language=rr]
remoter::client(addr=my.relay.addr, port=my.relay.port)
\end{lstlisting}

Here \texttt{my.relay.addr} is the address of the relay, and
\texttt{my.relay.port} should math the argument \texttt{recvport} used
when creating the relay (default is
\texttt{r\ as.integer(formals(remoter::relay){[}{[}"recvport"{]}{]})}).



\addcontentsline{toc}{section}{References}
\bibliography{./include/remoter}
\bibliographystyle{plain}

\end{document}
